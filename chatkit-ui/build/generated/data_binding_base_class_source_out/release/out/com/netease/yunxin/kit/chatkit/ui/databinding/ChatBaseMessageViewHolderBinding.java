// Generated by view binder compiler. Do not edit!
package com.netease.yunxin.kit.chatkit.ui.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.netease.yunxin.kit.chatkit.ui.R;
import com.netease.yunxin.kit.common.ui.widgets.ContactAvatarView;
import com.netease.yunxin.kit.common.ui.widgets.LongClickableFrameLayout;
import com.netease.yunxin.kit.common.ui.widgets.RoundPoint;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ChatBaseMessageViewHolderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ContactAvatarView avatarMine;

  @NonNull
  public final ConstraintLayout baseRoot;

  @NonNull
  public final ContactAvatarView fromAvatar;

  @NonNull
  public final AppCompatImageView ivStatus;

  @NonNull
  public final LinearLayout llyMessage;

  @NonNull
  public final Guideline marginEnd;

  @NonNull
  public final Guideline marginStart;

  @NonNull
  public final LinearLayout messageBody;

  @NonNull
  public final LongClickableFrameLayout messageContainer;

  @NonNull
  public final FrameLayout messageRevoke;

  @NonNull
  public final ProgressBar messageSending;

  @NonNull
  public final FrameLayout messageStatus;

  @NonNull
  public final RoundPoint readProcess;

  @NonNull
  public final TextView tvName;

  @NonNull
  public final TextView tvReply;

  @NonNull
  public final TextView tvSignal;

  @NonNull
  public final TextView tvTime;

  private ChatBaseMessageViewHolderBinding(@NonNull ConstraintLayout rootView,
      @NonNull ContactAvatarView avatarMine, @NonNull ConstraintLayout baseRoot,
      @NonNull ContactAvatarView fromAvatar, @NonNull AppCompatImageView ivStatus,
      @NonNull LinearLayout llyMessage, @NonNull Guideline marginEnd,
      @NonNull Guideline marginStart, @NonNull LinearLayout messageBody,
      @NonNull LongClickableFrameLayout messageContainer, @NonNull FrameLayout messageRevoke,
      @NonNull ProgressBar messageSending, @NonNull FrameLayout messageStatus,
      @NonNull RoundPoint readProcess, @NonNull TextView tvName, @NonNull TextView tvReply,
      @NonNull TextView tvSignal, @NonNull TextView tvTime) {
    this.rootView = rootView;
    this.avatarMine = avatarMine;
    this.baseRoot = baseRoot;
    this.fromAvatar = fromAvatar;
    this.ivStatus = ivStatus;
    this.llyMessage = llyMessage;
    this.marginEnd = marginEnd;
    this.marginStart = marginStart;
    this.messageBody = messageBody;
    this.messageContainer = messageContainer;
    this.messageRevoke = messageRevoke;
    this.messageSending = messageSending;
    this.messageStatus = messageStatus;
    this.readProcess = readProcess;
    this.tvName = tvName;
    this.tvReply = tvReply;
    this.tvSignal = tvSignal;
    this.tvTime = tvTime;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ChatBaseMessageViewHolderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ChatBaseMessageViewHolderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.chat_base_message_view_holder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ChatBaseMessageViewHolderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.avatarMine;
      ContactAvatarView avatarMine = ViewBindings.findChildViewById(rootView, id);
      if (avatarMine == null) {
        break missingId;
      }

      ConstraintLayout baseRoot = (ConstraintLayout) rootView;

      id = R.id.from_avatar;
      ContactAvatarView fromAvatar = ViewBindings.findChildViewById(rootView, id);
      if (fromAvatar == null) {
        break missingId;
      }

      id = R.id.ivStatus;
      AppCompatImageView ivStatus = ViewBindings.findChildViewById(rootView, id);
      if (ivStatus == null) {
        break missingId;
      }

      id = R.id.llyMessage;
      LinearLayout llyMessage = ViewBindings.findChildViewById(rootView, id);
      if (llyMessage == null) {
        break missingId;
      }

      id = R.id.marginEnd;
      Guideline marginEnd = ViewBindings.findChildViewById(rootView, id);
      if (marginEnd == null) {
        break missingId;
      }

      id = R.id.marginStart;
      Guideline marginStart = ViewBindings.findChildViewById(rootView, id);
      if (marginStart == null) {
        break missingId;
      }

      id = R.id.messageBody;
      LinearLayout messageBody = ViewBindings.findChildViewById(rootView, id);
      if (messageBody == null) {
        break missingId;
      }

      id = R.id.messageContainer;
      LongClickableFrameLayout messageContainer = ViewBindings.findChildViewById(rootView, id);
      if (messageContainer == null) {
        break missingId;
      }

      id = R.id.messageRevoke;
      FrameLayout messageRevoke = ViewBindings.findChildViewById(rootView, id);
      if (messageRevoke == null) {
        break missingId;
      }

      id = R.id.messageSending;
      ProgressBar messageSending = ViewBindings.findChildViewById(rootView, id);
      if (messageSending == null) {
        break missingId;
      }

      id = R.id.messageStatus;
      FrameLayout messageStatus = ViewBindings.findChildViewById(rootView, id);
      if (messageStatus == null) {
        break missingId;
      }

      id = R.id.read_Process;
      RoundPoint readProcess = ViewBindings.findChildViewById(rootView, id);
      if (readProcess == null) {
        break missingId;
      }

      id = R.id.tv_name;
      TextView tvName = ViewBindings.findChildViewById(rootView, id);
      if (tvName == null) {
        break missingId;
      }

      id = R.id.tv_reply;
      TextView tvReply = ViewBindings.findChildViewById(rootView, id);
      if (tvReply == null) {
        break missingId;
      }

      id = R.id.tvSignal;
      TextView tvSignal = ViewBindings.findChildViewById(rootView, id);
      if (tvSignal == null) {
        break missingId;
      }

      id = R.id.tvTime;
      TextView tvTime = ViewBindings.findChildViewById(rootView, id);
      if (tvTime == null) {
        break missingId;
      }

      return new ChatBaseMessageViewHolderBinding((ConstraintLayout) rootView, avatarMine, baseRoot,
          fromAvatar, ivStatus, llyMessage, marginEnd, marginStart, messageBody, messageContainer,
          messageRevoke, messageSending, messageStatus, readProcess, tvName, tvReply, tvSignal,
          tvTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
