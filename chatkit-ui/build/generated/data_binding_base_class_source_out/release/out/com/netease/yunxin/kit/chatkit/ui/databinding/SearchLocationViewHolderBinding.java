// Generated by view binder compiler. Do not edit!
package com.netease.yunxin.kit.chatkit.ui.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.netease.yunxin.kit.chatkit.ui.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SearchLocationViewHolderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView locationDesc;

  @NonNull
  public final ImageView locationIcon;

  @NonNull
  public final ImageView locationSelected;

  @NonNull
  public final TextView locationTitle;

  private SearchLocationViewHolderBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView locationDesc, @NonNull ImageView locationIcon,
      @NonNull ImageView locationSelected, @NonNull TextView locationTitle) {
    this.rootView = rootView;
    this.locationDesc = locationDesc;
    this.locationIcon = locationIcon;
    this.locationSelected = locationSelected;
    this.locationTitle = locationTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SearchLocationViewHolderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SearchLocationViewHolderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.search_location_view_holder, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SearchLocationViewHolderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.location_desc;
      TextView locationDesc = ViewBindings.findChildViewById(rootView, id);
      if (locationDesc == null) {
        break missingId;
      }

      id = R.id.location_icon;
      ImageView locationIcon = ViewBindings.findChildViewById(rootView, id);
      if (locationIcon == null) {
        break missingId;
      }

      id = R.id.location_selected;
      ImageView locationSelected = ViewBindings.findChildViewById(rootView, id);
      if (locationSelected == null) {
        break missingId;
      }

      id = R.id.location_title;
      TextView locationTitle = ViewBindings.findChildViewById(rootView, id);
      if (locationTitle == null) {
        break missingId;
      }

      return new SearchLocationViewHolderBinding((ConstraintLayout) rootView, locationDesc,
          locationIcon, locationSelected, locationTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
