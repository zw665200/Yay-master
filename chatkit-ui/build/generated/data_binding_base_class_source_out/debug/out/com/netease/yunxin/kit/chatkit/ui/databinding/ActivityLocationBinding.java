// Generated by view binder compiler. Do not edit!
package com.netease.yunxin.kit.chatkit.ui.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.netease.yunxin.kit.chatkit.ui.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLocationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView locationButton;

  @NonNull
  public final FrameLayout locationList;

  @NonNull
  public final EditText locationSearch;

  @NonNull
  public final LinearLayout locationSearchBar;

  @NonNull
  public final TextView locationSearchCancel;

  @NonNull
  public final LinearLayout locationSearchEmpty;

  @NonNull
  public final RecyclerView locationSearchList;

  @NonNull
  public final Barrier mapBottomBarrier;

  @NonNull
  public final Group mapDetail;

  @NonNull
  public final TextView mapDetailAddress;

  @NonNull
  public final ImageView mapDetailBack;

  @NonNull
  public final View mapDetailBottom;

  @NonNull
  public final ImageView mapDetailNavigation;

  @NonNull
  public final TextView mapDetailTitle;

  @NonNull
  public final Group mapLocation;

  @NonNull
  public final TextView mapViewCancel;

  @NonNull
  public final FrameLayout mapViewContainer;

  @NonNull
  public final Group mapViewEmpty;

  @NonNull
  public final ImageView mapViewEmptyIcon;

  @NonNull
  public final TextView mapViewEmptyTip;

  @NonNull
  public final TextView mapViewSend;

  @NonNull
  public final View mapViewSendLayer;

  @NonNull
  public final View mapViewTop;

  private ActivityLocationBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView locationButton, @NonNull FrameLayout locationList,
      @NonNull EditText locationSearch, @NonNull LinearLayout locationSearchBar,
      @NonNull TextView locationSearchCancel, @NonNull LinearLayout locationSearchEmpty,
      @NonNull RecyclerView locationSearchList, @NonNull Barrier mapBottomBarrier,
      @NonNull Group mapDetail, @NonNull TextView mapDetailAddress,
      @NonNull ImageView mapDetailBack, @NonNull View mapDetailBottom,
      @NonNull ImageView mapDetailNavigation, @NonNull TextView mapDetailTitle,
      @NonNull Group mapLocation, @NonNull TextView mapViewCancel,
      @NonNull FrameLayout mapViewContainer, @NonNull Group mapViewEmpty,
      @NonNull ImageView mapViewEmptyIcon, @NonNull TextView mapViewEmptyTip,
      @NonNull TextView mapViewSend, @NonNull View mapViewSendLayer, @NonNull View mapViewTop) {
    this.rootView = rootView;
    this.locationButton = locationButton;
    this.locationList = locationList;
    this.locationSearch = locationSearch;
    this.locationSearchBar = locationSearchBar;
    this.locationSearchCancel = locationSearchCancel;
    this.locationSearchEmpty = locationSearchEmpty;
    this.locationSearchList = locationSearchList;
    this.mapBottomBarrier = mapBottomBarrier;
    this.mapDetail = mapDetail;
    this.mapDetailAddress = mapDetailAddress;
    this.mapDetailBack = mapDetailBack;
    this.mapDetailBottom = mapDetailBottom;
    this.mapDetailNavigation = mapDetailNavigation;
    this.mapDetailTitle = mapDetailTitle;
    this.mapLocation = mapLocation;
    this.mapViewCancel = mapViewCancel;
    this.mapViewContainer = mapViewContainer;
    this.mapViewEmpty = mapViewEmpty;
    this.mapViewEmptyIcon = mapViewEmptyIcon;
    this.mapViewEmptyTip = mapViewEmptyTip;
    this.mapViewSend = mapViewSend;
    this.mapViewSendLayer = mapViewSendLayer;
    this.mapViewTop = mapViewTop;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLocationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLocationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_location, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLocationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.location_button;
      ImageView locationButton = ViewBindings.findChildViewById(rootView, id);
      if (locationButton == null) {
        break missingId;
      }

      id = R.id.location_list;
      FrameLayout locationList = ViewBindings.findChildViewById(rootView, id);
      if (locationList == null) {
        break missingId;
      }

      id = R.id.location_search;
      EditText locationSearch = ViewBindings.findChildViewById(rootView, id);
      if (locationSearch == null) {
        break missingId;
      }

      id = R.id.location_search_bar;
      LinearLayout locationSearchBar = ViewBindings.findChildViewById(rootView, id);
      if (locationSearchBar == null) {
        break missingId;
      }

      id = R.id.location_search_cancel;
      TextView locationSearchCancel = ViewBindings.findChildViewById(rootView, id);
      if (locationSearchCancel == null) {
        break missingId;
      }

      id = R.id.location_search_empty;
      LinearLayout locationSearchEmpty = ViewBindings.findChildViewById(rootView, id);
      if (locationSearchEmpty == null) {
        break missingId;
      }

      id = R.id.location_search_list;
      RecyclerView locationSearchList = ViewBindings.findChildViewById(rootView, id);
      if (locationSearchList == null) {
        break missingId;
      }

      id = R.id.map_bottom_barrier;
      Barrier mapBottomBarrier = ViewBindings.findChildViewById(rootView, id);
      if (mapBottomBarrier == null) {
        break missingId;
      }

      id = R.id.map_detail;
      Group mapDetail = ViewBindings.findChildViewById(rootView, id);
      if (mapDetail == null) {
        break missingId;
      }

      id = R.id.map_detail_address;
      TextView mapDetailAddress = ViewBindings.findChildViewById(rootView, id);
      if (mapDetailAddress == null) {
        break missingId;
      }

      id = R.id.map_detail_back;
      ImageView mapDetailBack = ViewBindings.findChildViewById(rootView, id);
      if (mapDetailBack == null) {
        break missingId;
      }

      id = R.id.map_detail_bottom;
      View mapDetailBottom = ViewBindings.findChildViewById(rootView, id);
      if (mapDetailBottom == null) {
        break missingId;
      }

      id = R.id.map_detail_navigation;
      ImageView mapDetailNavigation = ViewBindings.findChildViewById(rootView, id);
      if (mapDetailNavigation == null) {
        break missingId;
      }

      id = R.id.map_detail_title;
      TextView mapDetailTitle = ViewBindings.findChildViewById(rootView, id);
      if (mapDetailTitle == null) {
        break missingId;
      }

      id = R.id.map_location;
      Group mapLocation = ViewBindings.findChildViewById(rootView, id);
      if (mapLocation == null) {
        break missingId;
      }

      id = R.id.map_view_cancel;
      TextView mapViewCancel = ViewBindings.findChildViewById(rootView, id);
      if (mapViewCancel == null) {
        break missingId;
      }

      id = R.id.map_view_container;
      FrameLayout mapViewContainer = ViewBindings.findChildViewById(rootView, id);
      if (mapViewContainer == null) {
        break missingId;
      }

      id = R.id.map_view_empty;
      Group mapViewEmpty = ViewBindings.findChildViewById(rootView, id);
      if (mapViewEmpty == null) {
        break missingId;
      }

      id = R.id.map_view_empty_icon;
      ImageView mapViewEmptyIcon = ViewBindings.findChildViewById(rootView, id);
      if (mapViewEmptyIcon == null) {
        break missingId;
      }

      id = R.id.map_view_empty_tip;
      TextView mapViewEmptyTip = ViewBindings.findChildViewById(rootView, id);
      if (mapViewEmptyTip == null) {
        break missingId;
      }

      id = R.id.map_view_send;
      TextView mapViewSend = ViewBindings.findChildViewById(rootView, id);
      if (mapViewSend == null) {
        break missingId;
      }

      id = R.id.map_view_send_layer;
      View mapViewSendLayer = ViewBindings.findChildViewById(rootView, id);
      if (mapViewSendLayer == null) {
        break missingId;
      }

      id = R.id.map_view_top;
      View mapViewTop = ViewBindings.findChildViewById(rootView, id);
      if (mapViewTop == null) {
        break missingId;
      }

      return new ActivityLocationBinding((ConstraintLayout) rootView, locationButton, locationList,
          locationSearch, locationSearchBar, locationSearchCancel, locationSearchEmpty,
          locationSearchList, mapBottomBarrier, mapDetail, mapDetailAddress, mapDetailBack,
          mapDetailBottom, mapDetailNavigation, mapDetailTitle, mapLocation, mapViewCancel,
          mapViewContainer, mapViewEmpty, mapViewEmptyIcon, mapViewEmptyTip, mapViewSend,
          mapViewSendLayer, mapViewTop);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
